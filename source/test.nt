import {
  core.int.io {print-int-line},
  core.text.io {print-line},
  http-base.field {Field},
  http-base.header.show {show-header},
  http-base.request {Request},
  http-base.request-method {GET},
  http-base.response {Response},
  this.entity.config {Config},
  this.entity.error {show-error},
  this.entity.option {Follow-Location, Timeout},
  this.scene.perform {perform},
}

define main(): unit {
  let result =
    perform(
      Request of {
        method := GET,
        path := *"/",
        fields := {
          [
            Field(*"My-Field", *"hoge"),
            Field(*"Content-Type", *"application/json"),
            Field(*"x-my-extension", *"Bearer 1234567890"),
          ]
        },
        body := *"こんにちは〜",
      },
      Config of {
        host := "http://localhost:8080",
        initial-buffer-size := 1024,
        options := {
          [
            Follow-Location(True),
            Timeout(2),
          ]
        },
      },
    );
  match result {
  | Right(response) =>
    let Response of {status-code, body, fields} = response;
    pin body = body;
    print-line("success:");
    print-line(body);
    print-line("header:");
    pin header = show-header(fields);
    print-line(header);
    print-line("status-code:");
    print-int-line(status-code);
  | Left(e) =>
    pin error = show-error(e);
    print("failure: ");
    print-line(error);
  }
}

define zen(): unit {
  main()
}
