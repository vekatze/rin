import {
  core.binary-builder {_get-head-ptr, _proceed, binary-builder, extract, make-binary-builder},
  core.c-string {c-string, from-c-string, to-c-string},
  core.external {free},
  core.magic,
  core.memory {load-int},
  core.pointer {null-pointer, shift},
  core.text {_Text, text-byte-length},
  core.word,
  http-base.field {Field},
  http-base.header {header},
  http-base.request {Request, request},
  http-base.request-method.show {show-request-method},
  http-base.response {Response, response},
  path.path,
  this.context.foreign {
    CURLH_HEADER,
    CURLINFO_RESPONSE_CODE,
    CURLOPT_CUSTOMREQUEST,
    CURLOPT_FOLLOWLOCATION,
    CURLOPT_HTTPHEADER,
    CURLOPT_POSTFIELDS,
    CURLOPT_POSTFIELDSIZE,
    CURLOPT_TIMEOUT,
    CURLOPT_URL,
    CURLOPT_WRITEDATA,
    CURLOPT_WRITEFUNCTION,
  },
  this.context.rin {rin},
  this.entity.config {Config, config},
  this.entity.handle {
    _curl_easy_getinfo,
    _curl_easy_perform,
    _curl_easy_setopt,
    _curl_easy_setopt_bool,
    _curl_easy_setopt_text,
    _handle,
    _with-handle,
  },
  this.entity.option {Follow-Location, Timeout, option},
  this.entity.slist {_slist, _with-header},
}

foreign {
  llvm.memcpy.p0.p0.i64(pointer, pointer, int64, int1): void,
  curl_easy_nextheader(_handle, int, int, pointer): pointer,
  neut_rin_v0_1_get_header_name(pointer): pointer,
  neut_rin_v0_1_get_header_value(pointer): pointer,
}

define _callback(ptr: pointer, size: int, nmemb: int, stream: &binary-builder): int {
  let total-size = mul-int(size, nmemb);
  let content-head-ptr = _get-head-ptr(stream, total-size);
  let _ = magic external llvm.memcpy.p0.p0.i64(content-head-ptr, ptr, total-size, 0);
  _proceed(stream, total-size);
  total-size
}

define _get-callback-label-ptr(): int {
  let callback-ptr = core.magic.cast(_, pointer, _callback);
  let callback-label-ptr = load-int(shift(callback-ptr, mul-int(core.word.size, 2)));
  free(callback-ptr);
  callback-label-ptr
}

define _read-all-headers(h: _handle, cursor: pointer): header {
  let last: int = -1;
  let new-header = magic external curl_easy_nextheader(h, CURLH_HEADER, last, cursor);
  if eq-int(magic cast(pointer, int, new-header), 0) {
    Nil
  } else {
    let name =
      from-c-string(magic cast(
        pointer,
        &c-string,
        magic external neut_rin_v0_1_get_header_name(new-header),
      ));
    let value =
      from-c-string(magic cast(
        pointer,
        &c-string,
        magic external neut_rin_v0_1_get_header_value(new-header),
      ));
    Cons(Field(name, value), _read-all-headers(h, new-header))
  }
}

define _interpret-options(h: _handle, options: list(option)): rin(unit) {
  match options {
  | Nil =>
    Right(Unit)
  | Cons(o, rest) =>
    match o {
    | Follow-Location(b) =>
      try _ = _curl_easy_setopt_bool(h, CURLOPT_FOLLOWLOCATION, b);
      _interpret-options(h, rest)
    | Timeout(x) =>
      try _ = _curl_easy_setopt(h, CURLOPT_TIMEOUT, x);
      _interpret-options(h, rest)
    }
  }
}

define perform(req: request, c: config): rin(response) {
  _with-handle(function (h) {
    let Config of {host, initial-buffer-size, options} = c;
    try _ = _interpret-options(h, options);
    let Request of {method, path, fields, body} = req;
    pin path = path;
    let url = {
      pin tmp = path.path.append(host, path);
      to-c-string(tmp)
    };
    pin url = url;
    pin body = body;
    pin body-parameter = to-c-string(body);
    try _ = _curl_easy_setopt_text(h, CURLOPT_URL, url);
    pin method' = show-request-method(method);
    pin method-parameter = to-c-string(method');
    try _ = _curl_easy_setopt_text(h, CURLOPT_CUSTOMREQUEST, method-parameter);
    _with-header(fields, function (slist) {
      try _ = _curl_easy_setopt(h, CURLOPT_HTTPHEADER, magic cast(_slist, int, slist));
      try _ = _curl_easy_setopt_text(h, CURLOPT_POSTFIELDS, body-parameter);
      try _ = _curl_easy_setopt(h, CURLOPT_POSTFIELDSIZE, text-byte-length(body));
      let callback-label-ptr = _get-callback-label-ptr();
      let body-buffer = make-binary-builder(initial-buffer-size);
      let _ on body-buffer = _curl_easy_setopt(h, CURLOPT_WRITEDATA, magic cast(&binary-builder, int, body-buffer));
      try _ = _curl_easy_setopt(h, CURLOPT_WRITEFUNCTION, callback-label-ptr);
      try _ = _curl_easy_perform(h);
      try status-code = _curl_easy_getinfo(h, CURLINFO_RESPONSE_CODE);
      let fields = _read-all-headers(h, null-pointer);
      let body = _Text(extract(body-buffer));
      Right(
        Response of {
          status-code,
          fields,
          body,
        },
      )
    })
  })
}
