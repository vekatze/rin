import {
  core.c-string {c-string, to-c-string},
  core.magic,
  core.text {format},
  http-base.field {Field},
  http-base.header {header},
  this.context.rin {rin},
  this.entity.error {Curl-Header-Construction-Error, error},
}

data _slist {
| _Slist(pointer)
}

foreign {
  curl_slist_append(_slist, pointer): pointer,
  curl_slist_free_all(_slist): void,
}

constant _empty-slist: _slist {
  magic cast(int, _slist, 0)
}

inline _fold-left-maybe<elem-type, result-type>(
  acc: result-type,
  xs: list(elem-type),
  !consumer: (result-type, elem-type) -> ?result-type,
): ?result-type {
  let helper =
    define loop(acc, xs): ?result-type {
      match xs {
      | Nil =>
        Right(acc)
      | Cons(y, ys) =>
        try tmp = !consumer(acc, y) in
        loop(tmp, ys)
      }
    }
  in
  helper(acc, xs)
}

define _slist-free(slist-ptr: _slist): unit {
  let _ = magic external curl_slist_free_all(slist-ptr) in
  Unit
}

inline _slist-append-maybe(slist-ptr: _slist, key: text, value: text): ?_slist {
  pin kv = format("{}: {}", [key, value]) in
  pin content = to-c-string(kv) in
  // let content = magic cast(&c-string, pointer, content) in
  let content = core.magic.cast(&c-string, pointer, content) in
  let result = magic external curl_slist_append(slist-ptr, content) in
  if eq-int(magic cast(pointer, int, result), 0) {
    _slist-free(slist-ptr);
    none()
  } else {
    Right(magic cast(pointer, _slist, result))
  }
}

define _make-slist-maybe(fields: header): ?_slist {
  _fold-left-maybe(_empty-slist, fields, function (acc, field) {
    let Field(key, value) = field in
    _slist-append-maybe(acc, key, value)
  })
}

define _lift-none<a>(e: ?a): either(error, a) {
  match e {
  | Right(v) =>
    Right(v)
  | Left(_) =>
    Left(Curl-Header-Construction-Error)
  }
}

define _with-header<a>(fields: header, callback: (_slist) -> rin(a)): rin(a) {
  try slist = _lift-none(_make-slist-maybe(fields)) in
  let result = callback(slist) in
  _slist-free(slist);
  result
}
