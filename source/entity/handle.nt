import {
  core.c-string {c-string},
  core.memory {load-int},
  this.context.foreign {CURL_GLOBAL_DEFAULT},
  this.context.rin {_wrap-curl-code, rin},
  this.entity.error {Curl-Error, Curl-Initialization-Error, _curl-code},
}

data _handle {
| _Curl-Handle(pointer)
}

foreign {
  curl_global_init(int): _curl-code,
  curl_global_cleanup(): void,
  curl_easy_init(): pointer,
  curl_easy_cleanup(_handle): void,
  curl_easy_setopt(_handle, int): _curl-code,
  curl_easy_getinfo(_handle, int): _curl-code,
  curl_easy_perform(_handle): _curl-code,
}

define _curl_global_init(flags: int): _curl-code {
  magic external curl_global_init(flags)
}

define _curl_easy_init(): pointer {
  magic external curl_easy_init()
}

define _global-init(): rin(unit) {
  let code = _curl_global_init(CURL_GLOBAL_DEFAULT) in
  _wrap-curl-code(code, Unit)
}

define _global_cleanup(): unit {
  let _ = magic external curl_global_cleanup() in
  Unit
}

define _init(): rin(_handle) {
  let result = _curl_easy_init() in
  if eq-int(magic cast(pointer, int, result), 0) {
    Left(Curl-Initialization-Error)
  } else {
    Right(magic cast(pointer, _handle, result))
  }
}

define _cleanup(h: _handle): unit {
  let _ = magic external curl_easy_cleanup(h) in
  Unit
}

define _curl_easy_getinfo(h: _handle, option: int): rin(int) {
  let buffer = magic alloca(int, 1) in
  let result = magic external curl_easy_getinfo(h, option)(buffer: pointer) in
  if eq-int(magic cast(_curl-code, int, result), 0) {
    Right(load-int(buffer))
  } else {
    Left(Curl-Error(result))
  }
}

define _curl_easy_setopt(h: _handle, option: int, parameter: int): rin(unit) {
  let code = magic external curl_easy_setopt(h, option)(parameter: int) in
  _wrap-curl-code(code, Unit)
}

define _bool-to-int(b: bool): int {
  if b {
    1
  } else {
    0
  }
}

define _curl_easy_setopt_bool(h: _handle, option: int, parameter: bool): rin(unit) {
  let content = _bool-to-int(parameter) in
  let code = magic external curl_easy_setopt(h, option)(content: int) in
  _wrap-curl-code(code, Unit)
}

define _curl_easy_setopt_text(h: _handle, option: int, parameter: &c-string): rin(unit) {
  let parameter = magic cast(&c-string, pointer, parameter) in
  let code = magic external curl_easy_setopt(h, option)(parameter: pointer) in
  _wrap-curl-code(code, Unit)
}

define _curl_easy_perform(h: _handle): rin(unit) {
  let code = magic external curl_easy_perform(h) in
  _wrap-curl-code(code, Unit)
}

inline _with-handle<a>(callback: (_handle) -> rin(a)): rin(a) {
  try _ = _global-init() in
  try h = _init() in
  try result =
    let tmp = callback(h) in
    _cleanup(h);
    _global_cleanup();
    tmp
  in
  Right(result)
}
